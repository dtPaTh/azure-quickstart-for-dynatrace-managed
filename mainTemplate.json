{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]"
        },
        "virtualNetworkNewOrExisting": {
            "type": "string",
            "defaultValue": "new",
            "metadata": {
                "description": "Determines whether or not a new virtual network should be provisioned."
            }
        },
        "virtualNetworkResourceGroupName": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Name of the resource group for the existing virtual network"
            }
        },
        "virtualNetworkName": {
            "type": "string",
            "defaultValue": "[concat('cluster-vnet_',uniqueString(resourceGroup().id))]"
        },
        "vnetAddressPrefix": {
            "type": "string",
            "defaultValue": "10.1.0.0/16"
        },
        "subnetName": {
            "type": "string",
            "defaultValue": "cluster-subnet"
        },
        "subnetAddressPrefix": {
            "type": "string",
            "defaultValue": "10.1.0.0/16"
        },
        "vmSize": {
            "type": "string",
            "defaultValue":"Standard_D8s_v3",
            "metadata": {
                "description": "VM instance type for dynatrace cluster nodes (https://www.dynatrace.com/support/help/get-started/managed-introduction/what-are-the-hardware-and-operating-system-requirements/)"
            }
        },
       
        "sizeOfDataDiskInGB": {
            "type": "int",
            "defaultValue": 50,
            "minValue": 25,
            "maxValue": 2000,
            "metadata": {
                "description": "Size (GB) for datadisk used for Dynatrace logs, temporary files, installers downloads"
            }
        },
        "sizeOfTransactionDataDiskInGB": {
            "type": "int",
            "defaultValue": 200,
            "minValue": 50,
            "maxValue": 2000,
            "metadata": {
                "description": "Size (GB) for datadisk used for transaction store"
            }
        },
        "sizeOfLongTermMetricsDiskInGB": {
            "type": "int",
            "defaultValue": 1000,
            "minValue": 100,
            "maxValue": 2000,
            "metadata": {
                "description": "Size (GB) for datadisk used for long-term metrics"
            }
        },
        "sizeOfElasticSearchDiskInGB": {
            "type": "int",
            "defaultValue": 1500,
            "minValue": 50,
            "maxValue": 2000,
            "metadata": {
                "description": "Size (GB) for datadisk used for user sessions"
            }
        },
        "totalNodeInstanceCount": {
            "type": "int",
            "defaultValue": 3,
            "minValue": 3,
            "maxValue": 24,
            "metadata": {
                "description": "Number of total cluster nodes (including master node)"
            }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "SSH username"
            }
        },
        "adminAuthenticationType": {
            "type": "string",
            "allowedValues": ["password","sshPublicKey"]
        },
        "adminPassword": {
            "type": "securestring",
            "minLength": 15,
            "metadata": {
                "description": "SSH password"
            }
        },
        "adminSshPublicKey": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "SSH RSA public key file as a string. Not used if authenticationType of password."
            }
        },
        "masterDNSPrefix": {
            "type": "string",
            "defaultValue": "[concat('dt-master',uniqueString(resourceGroup().id))]",
            "metadata": {
                "description": "DNS prefix for the master node"
            }
        },
        "nodeDNSPrefix": {
            "type": "string",
            "defaultValue": "[concat('dt-node',uniqueString(resourceGroup().id),'-')]",
            "metadata": {
                "description": "DNS prefix for the secondary node, which will be postfixed with the -node-id"
            }
        },
        "licenseKey": {
            "type": "string",
            "metadata": {
                "description": "Your Dynatrace License Key"
            }
        },
        "installerDownloadUrl": {
            "type": "string",
            "metadata": {
                "description": "Your intaller download url"
            }
        },
        "initialEnvironmentName": {
            "type": "string",
            "defaultValue": "MyEnvironment",
            "metadata": {
                "description": "Name of your initial environment"
            }
        },
        "initialEnvironmentAdminFirstname": {
            "type": "string",
            "metadata": {
                "description": "Environment administrators first name"
            }
        },
        "initialEnvironmentAdminLastname": {
            "type": "string",
            "metadata": {
                "description": "Environment administrators last name"
            }
        },
        "initialEnvironmentAdminEmail": {
            "type": "string",
            "metadata": {
                "description": "Environment administrators e-mail address"
            }
        },
        "initialEnvironmentAdminSecret": {
            "type": "securestring",
            "metadata": {
                "description": "Environment administrators login password"
            }
        },
        "scriptHost": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Base uri where the custom script extension scripts are hosted"
            }
        }
    },
    "variables": {
        "location": "[parameters('location')]",
        "nsgName": "cluster-nsg",
        "nsgResouceId": "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsgName'))]",
        "vnetName": "[parameters('virtualNetworkName')]",
        "vnetResourceId":"[resourceId('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
        "subnetName": "[parameters('subnetName')]",
        "vnetAddressPrefix": "[parameters('vnetAddressPrefix')]",
        "subnetAddressPrefix": "[parameters('subnetAddressPrefix')]",
        "availabilitySetName": "cluster-nodes",
        "sizeOfDataDiskInGB": "[parameters('sizeOfDataDiskInGB')]",
        "sizeOfSessionDataDiskInGB": "[parameters('sizeOfTransactionDataDiskInGB')]",
        "sizeOfLongTermMetricsDiskInGB": "[parameters('sizeOfLongTermMetricsDiskInGB')]",
        "sizeOfElasticSearchDiskInGB": "[parameters('sizeOfElasticSearchDiskInGB')]",
        "nodeInstanceCount": "[sub(parameters('totalNodeInstanceCount'),1)]",
        "masterName": "master",
        "masterNodeResourceId":"[resourceId('Microsoft.Compute/virtualMachines/', variables('masterName'))]",
        "masterNicName": "master-nic",
        "masterNicResourceId":"[resourceId('Microsoft.Network/networkInterfaces/', variables('masterNicName'))]",
        "masterPublicIPAddressName": "master-public-ip",
        "masterPublicAddressResourceId":"[resourceId('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]",
        "masterDnsLabelPrefix": "[parameters('masterDNSPrefix')]",
        "masterExtensionName": "dynatrace-master-setup",
        "nodeName": "node",
        "nodeNicName": "node-nic_",
        "nodeDnsLabelPrefix": "[concat(parameters('nodeDNSPrefix'),'-')]",
        "nodePublicIPAddressName": "node-public-ip_",
        "nodeExtensionName": "dynatrace-node-setup_",

        "sshKeyPath": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
        "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
                "publicKeys": [
                {
                    "path": "[variables('sshKeyPath')]",
                    "keyData": "[parameters('adminSshPublicKey')]"
                }
                ]
            }
        }
    },
    "resources": [
        {
            "apiVersion": "2019-09-01",
            "name": "pid-877608b9-9ed9-42a6-8ab0-9ffc59b65e82",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        },
        {
            "apiVersion": "2019-08-01",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('nsgName')]",
            "location": "[variables('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "https_rule",
                        "properties": {
                            "description": "Allow https",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "Internet",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 250,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "OneAgent_rule",
                        "properties": {
                            "description": "Allow OneAgent communication",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8443",
                            "sourceAddressPrefix": "Internet",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 200,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "condition": "[equals(parameters('virtualNetworkNewOrExisting'), 'new')]",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('vnetName')]",
            "location": "[variables('location')]",
            "apiVersion": "2019-08-01",
            "dependsOn": [
                "[variables('nsgResouceId')]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('vnetAddressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetAddressPrefix')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgname'))]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2019-11-01",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('masterPublicIPAddressName')]",
            "location": "[variables('location')]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[variables('masterDnsLabelPrefix')]"
                }
            }
        },
        {
            "apiVersion": "2019-11-01",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('masterNicName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[variables('masterPublicAddressResourceId')]",
                "[variables('vnetResourceId')]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('masterPublicIPAddressName'))]"
                            },
                            "subnet": {
                                "id": "[resourceId(parameters('virtualNetworkResourceGroupName'),'Microsoft.Network/virtualNetworks/subnets/', variables('vnetName'),variables('subnetName'))]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2019-11-01",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[concat(variables('nodePublicIPAddressName'),copyIndex())]",
            "location": "[variables('location')]",
            "copy": {
                "name": "nodePublicIPLoop",
                "count": "[variables('nodeInstanceCount')]"
            },
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('nodeDnsLabelPrefix'),add(copyIndex(),2))]"
                }
            }
        },
        {
            "apiVersion": "2019-11-01",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('nodeNicName'),copyIndex())]",
            "location": "[variables('location')]",
            "copy": {
                "name": "nodeNicLoop",
                "count": "[variables('nodeInstanceCount')]"
            },
            "dependsOn": [
                "nodePublicIPLoop",
                "[variables('vnetResourceId')]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig2",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('nodePublicIPAddressName'),copyIndex()))]"
                            },
                            "subnet": {
                                "id": "[resourceId(parameters('virtualNetworkResourceGroupName'),'Microsoft.Network/virtualNetworks/subnets/', variables('vnetName'),variables('subnetName'))]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('availabilitySetName')]",
            "apiVersion": "2019-07-01",
            "location": "[variables('location')]",
            "properties": {
                "PlatformUpdateDomainCount": 2,
                "PlatformFaultDomainCount": 2
            },
            "sku": {
                "name": "Aligned"
            }
        },
        {
            "apiVersion": "2019-07-01",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('masterName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[variables('availabilitySetName')]",
                "[variables('masterNicResourceId')]"
            ],
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('masterName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]",
                     "linuxConfiguration": "[if(equals(parameters('adminAuthenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "Canonical",
                        "offer": "UbuntuServer",
                        "sku": "16.04.0-LTS",
                        "version": "latest"
                    },
                    "osDisk": {
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    },
                    "dataDisks": [
                        {
                            "diskSizeGB": "[variables('sizeOfDataDiskInGB')]",
                            "lun": 0,
                            "createOption": "Empty"
                        },
                        {
                            "diskSizeGB": "[variables('sizeOfSessionDataDiskInGB')]",
                            "lun": 1,
                            "createOption": "Empty"
                        },
                        {
                            "diskSizeGB": "[variables('sizeOfLongTermMetricsDiskInGB')]",
                            "lun": 2,
                            "createOption": "Empty"
                        },
                        {
                            "diskSizeGB": "[variables('sizeOfElasticSearchDiskInGB')]",
                            "lun": 3,
                            "createOption": "Empty"
                        }
                    ]
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('masterNicName'))]"
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('masterName'), '/',variables('masterExtensionName'))]",
            "location": "[variables('location')]",
            "apiVersion": "2019-07-01",
            "dependsOn": [
                "[variables('masterNodeResourceId')]"
            ],
            "tags": {
                "displayName": "Dynatrace Managed Master"
            },
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "skipDos2Unix": false
                },
                "protectedSettings": {
                    "fileUris": [
                        "[concat(parameters('scriptHost'),'prepare_vm_disks.sh')]",
                        "[concat(parameters('scriptHost'),'installmanaged.sh')]"
                    ],
                    "commandToExecute": "[concat('sh installmanaged.sh ', parameters('licenseKey'),' ',parameters('initialEnvironmentName'),' ',parameters('initialEnvironmentAdminFirstname'),' ',parameters('initialEnvironmentAdminLastname'),' ',parameters('initialEnvironmentAdminEmail'),' ',parameters('initialEnvironmentAdminSecret'),' ',parameters('installerDownloadUrl'))]"
                }
            }
        },
        {
            "apiVersion": "2019-07-01",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(variables('nodeName'), copyindex())]",
            "copy": {
                "name": "clusterNodeLoop",
                "count": "[variables('nodeInstanceCount')]",
                "mode": "Serial",
                "batchSize": 1
            },
            "location": "[variables('location')]",
            "dependsOn": [
                "nodeNicLoop",
                "[variables('masterNodeResourceId')]"
            ],
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[concat(variables('nodeName'), copyindex())]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "linuxConfiguration": "[if(equals(parameters('adminAuthenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "Canonical",
                        "offer": "UbuntuServer",
                        "sku": "16.04.0-LTS",
                        "version": "latest"
                    },
                    "osDisk": {
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    },
                    "dataDisks": [
                        {
                            "diskSizeGB": "[variables('sizeOfDataDiskInGB')]",
                            "lun": 0,
                            "createOption": "Empty"
                        },
                        {
                            "diskSizeGB": "[variables('sizeOfSessionDataDiskInGB')]",
                            "lun": 1,
                            "createOption": "Empty"
                        },
                        {
                            "diskSizeGB": "[variables('sizeOfLongTermMetricsDiskInGB')]",
                            "lun": 2,
                            "createOption": "Empty"
                        },
                        {
                            "diskSizeGB": "[variables('sizeOfElasticSearchDiskInGB')]",
                            "lun": 3,
                            "createOption": "Empty"
                        }
                    ]
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nodeNicName'),copyIndex()))]"
                        }
                    ]
                }
            }
        },
        {
            "apiVersion": "2019-07-01",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('nodeName'),copyIndex(),'/',variables('nodeExtensionName'),copyIndex())]",
            "copy": {
                "name": "clusterNodeExtensionLoop",
                "count": "[variables('nodeInstanceCount')]",
                "mode": "Serial",
                "batchSize": 1
            },
            "dependsOn": [
                "clusterNodeLoop"
            ],
            "location": "[variables('location')]",
            "tags": {
                "displayName": "Dynatrace Managed Secondary Node"
            },
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "skipDos2Unix": false
                },
                "protectedSettings": {
                    "fileUris": [
                        "[concat(parameters('scriptHost'),'prepare_vm_disks.sh')]",
                        "[concat(parameters('scriptHost'),'installmanagednode.sh')]"
                    ],
                    "commandToExecute": "[concat('sh installmanagednode.sh ', parameters('licenseKey'),' ',reference(variables('masterNicName')).ipConfigurations[0].properties.privateIPAddress, ' ',take(skip(split(reference(resourceId('Microsoft.Compute/virtualMachines/extensions',variables('masterName'),variables('masterExtensionName'))).instanceView.statuses[0].message,'\n'),2),1)[0],' ',parameters('initialEnvironmentAdminSecret'),' ',add(copyIndex(),2),' ',parameters('installerDownloadUrl'))]"
                }
            }
        }
    ]
}
